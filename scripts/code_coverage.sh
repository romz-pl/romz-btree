#!/bin/bash

#
# This script generates code covearage report for C++ project built by CMake
#


if [ $# -lt 2 ]; then
    echo "Usage: <path-to-src-directory> <path-to-codecov-directory> <optional-cmake-flags>"
    exit 1
fi

#
# returns abolute path of the directory
#
function abspath() {
    if [ ! -d "$1" ]; then
        echo "$1 is not directory "
        exit 1
    fi
    cd "$1"
    echo "$(pwd)"
    cd "$OLDPWD"
}

#
# The first argument: absolute path to source directory.
#
SOURCE_DIR="$(abspath $1)"
#echo "SOURCE_DIR: ${SOURCE_DIR}"

#
# The second argument: directory name for code coverag report
#
CODE_COV_DIR="$(abspath $2)"
#echo "CODE_COV_DIR: ${CODE_COV_DIR}"

#
# The third argument: Cmake flags (could be empty)
#
CMAKE_FLAGS=$3
#echo "CMAKE_FLAGS: ${CMAKE_FLAGS}"

#
# Create director for code coverage report, where the report is stored
#
mkdir -p ${CODE_COV_DIR} || exit 1

#
# Directory for building (compiling) project.
#
BUILD_DIR=${CODE_COV_DIR}/build

#
# The build directory is common for all code coverage reports.
#
mkdir -p ${BUILD_DIR} || exit 1


#
# Build the project
#
cd ${BUILD_DIR} || exit 1
#rm -rf CMakeCache.txt
cmake -G Ninja ${CMAKE_FLAGS} -DROMZ_CODE_COVERAGE_ENABLED=1 ${SOURCE_DIR} || exit 1
ninja || exit 1

#
# Reset counters in full database
#
lcov --directory ${BUILD_DIR} --zerocounters || exit 1

#
# Run test to obtain code coverage information.
# Provide regular expression for name of tests to be executed, for example:
# ctest -R "net*"
#
ctest -j5

#
# Name of database with full report
#
REPORT_DB_FULL=${CODE_COV_DIR}/report.info.full

#
# Generate full code coverage database
#
lcov --directory ${BUILD_DIR} --capture --output-file ${REPORT_DB_FULL} || exit 1

#
# Name of database with final report
#
REPORT_DB_FINAL=${CODE_COV_DIR}/report.info.final

#
# Remove from full database information related to system libraries and 3rdparty
#
lcov --remove ${REPORT_DB_FULL} \
    '/usr/include/*' \
    '/usr/local/*' \
    '*/3rdparty/*' \
    '*/tests/*' \
    -o ${REPORT_DB_FINAL} || exit 1


#
# Directory, where the report generated by "genhtml" is stored
#
GENHTML_DIR=${CODE_COV_DIR}/report

#
# Generate final HTML report
#
genhtml --output-directory ${GENHTML_DIR} ${REPORT_DB_FINAL} || exit 1

echo "Code coverage report has benn successfully generated!"
echo "To see report, output HTML file:"
echo "${GENHTML_DIR}/index.html"
